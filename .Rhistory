landhur <- SpatialPolygons(list(Polygons(huron@polygons[[1]]@Polygons[-1],ID=1)))
actualmic <- SpatialPolygons(list(Polygons(michigan@polygons[[1]]@Polygons[1],ID=1)))
landmic <- SpatialPolygons(list(Polygons(michigan@polygons[[1]]@Polygons[-1],ID=1)))
bigplot <- ggplot()+
geom_polygon(data=on_qu,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
#geom_polygon(data=mex,aes(x=long,y=lat,group=group), col="black", fill=NA)+
geom_polygon(data=states,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
geom_polygon(data=glakes, aes(x=long,y=lat,group=group), col="black", fill="lightgrey")+
geom_polygon(data=lowerlakes, aes(x=long, y=lat, group=group), col="black", fill="white")+
geom_polygon(data=actualsup, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landsup, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
geom_polygon(data=actualhur, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landhur, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
geom_polygon(data=actualmic, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landmic, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
coord_map("albers",lat0=40, lat1=50,xlim=c(-93,-75),ylim=c(41,49))+
theme(panel.grid = element_blank())+
annotate("text", x=-78.5, y=41.5, label="Lake Erie", size=7)+
annotate("text", x=-77, y=45, label="Lake \nOntario", size=7)+
annotate("text", x=-85 , y=42.8 , label="Lake \nSt Clair", size=7)+
ylab("Latitude")+
xlab("Longitude")
inset <- ggplot()+
geom_polygon(data=can,aes(x=long,y=lat,group=group), col="black", fill="white")+
geom_polygon(data=mex,aes(x=long,y=lat,group=group), col="black", fill="white")+
geom_polygon(data=usa,aes(x=long,y=lat,group=group), col="black", fill="white")+
geom_polygon(data=on_qu,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
geom_polygon(data=states,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
geom_polygon(data=glakes, aes(x=long, y=lat, group=group), fill="black", col="black")+
coord_map("albers",lat0=25, lat1=60,xlim=c(-125,-70),ylim=c(25,57))+
theme(axis.title.y=element_blank(),
axis.title.x=element_blank())+
scale_x_continuous(breaks=c(-120,-100,-80))+
theme(axis.text.x =  element_blank(),
axis.text.y =  element_blank(),
axis.title.y = element_blank(),
axis.title.x= element_blank(),
axis.line.x = element_blank(),
axis.line.y =element_blank(),
axis.ticks = element_blank(),
plot.background = element_rect(fill="white", color="black"),
panel.border = element_blank(),
panel.grid.major = element_line(colour = NA),
panel.grid.minor = element_line(colour = NA),
title = element_text(size = 20),
panel.background = element_rect(fill = "white"),
strip.text = element_text(size = 15))
jpeg(file="figure_study_area.jpeg", width=190, height=190, units="mm", res=600)
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5)  # the larger map
vpa_ <- viewport(width = 0.3, height = 0.3, x = 0.85, y = 0.7)  # the inset
print(bigplot, vp = vpb_)
print(inset, vp = vpa_)
dev.off()
bigplot <- ggplot()+
geom_polygon(data=on_qu,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
#geom_polygon(data=mex,aes(x=long,y=lat,group=group), col="black", fill=NA)+
geom_polygon(data=states,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
geom_polygon(data=glakes, aes(x=long,y=lat,group=group), col="black", fill="lightgrey")+
geom_polygon(data=lowerlakes, aes(x=long, y=lat, group=group), col="black", fill="white")+
geom_polygon(data=actualsup, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landsup, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
geom_polygon(data=actualhur, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landhur, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
geom_polygon(data=actualmic, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landmic, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
coord_map("albers",lat0=40, lat1=50,xlim=c(-93,-75),ylim=c(41,49))+
theme(panel.grid = element_blank())+
annotate("text", x=-78.5, y=41.5, label="Lake Erie", size=7)+
annotate("text", x=-77.2, y=45, label="Lake \nOntario", size=7)+
annotate("text", x=-85 , y=42.8 , label="Lake \nSt Clair", size=7)+
ylab("Latitude")+
xlab("Longitude")
jpeg(file="figure_study_area.jpeg", width=190, height=190, units="mm", res=600)
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5)  # the larger map
vpa_ <- viewport(width = 0.3, height = 0.3, x = 0.85, y = 0.7)  # the inset
print(bigplot, vp = vpb_)
print(inset, vp = vpa_)
dev.off()
bigplot <- ggplot()+
geom_polygon(data=on_qu,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
#geom_polygon(data=mex,aes(x=long,y=lat,group=group), col="black", fill=NA)+
geom_polygon(data=states,aes(x=long,y=lat,group=group), col="black", fill="darkgrey")+
geom_polygon(data=glakes, aes(x=long,y=lat,group=group), col="black", fill="lightgrey")+
geom_polygon(data=lowerlakes, aes(x=long, y=lat, group=group), col="black", fill="white")+
geom_polygon(data=actualsup, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landsup, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
geom_polygon(data=actualhur, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landhur, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
geom_polygon(data=actualmic, aes(x=long, y=lat, group=group), col="black", fill="lightgrey")+
geom_polygon(data=landmic, aes(x=long, y=lat, group=group), col="black", fill="darkgrey")+
coord_map("albers",lat0=40, lat1=50,xlim=c(-93,-75),ylim=c(41,49))+
theme(panel.grid = element_blank())+
annotate("text", x=-78.5, y=41.5, label="Lake Erie", size=7)+
annotate("text", x=-77.5, y=45, label="Lake \nOntario", size=7)+
annotate("text", x=-85 , y=42.8 , label="Lake \nSt Clair", size=7)+
ylab("Latitude")+
xlab("Longitude")
jpeg(file="figure_study_area.jpeg", width=190, height=190, units="mm", res=600)
grid.newpage()
vpb_ <- viewport(width = 1, height = 1, x = 0.5, y = 0.5)  # the larger map
vpa_ <- viewport(width = 0.3, height = 0.3, x = 0.85, y = 0.7)  # the inset
print(bigplot, vp = vpb_)
print(inset, vp = vpa_)
dev.off()
setwd("C:/Users/afournier/Dropbox/Other_People/Sarah_Winnicki")
files <- list.files()
files
library(readr)
library(tidyr)
egg1 <- read_log( "A02_Day9", skip=0, col_names=FALSE)
egg1
egg1 <- read_log( "A06_Day12_upright", skip=0, col_names=FALSE)
egg1
time_1 <- egg1$X5[1]
time_1
date <- egg1$X4[1]
date
files
files <- files[1:4]
files
# set your working directory to the folder where all the files are stored.
# this function will create an object with all the file names in it.
files <- list.files()
# creates a list to hold all the objects in
list_of_files <- list()
for(i in 1:length(files)){
list_of_files[files[i]] <- read_log(files[i], skip=1, col_names=FALSE)
}
list_of_files[[files[1]]]$X4[1]
list_of_files[[files[1]]]
list_of_files
files
files <- files[1:4]
files
library(readr)
library(tidyr)
# set your working directory to the folder where all the files are stored.
# this function will create an object with all the file names in it.
files <- list.files()
# creates a list to hold all the objects in
list_of_files <- list()
for(i in 1:length(files)){
list_of_files[[files[i]] <- read_log(files[i], skip=1, col_names=FALSE)
}
name <- files[i]
name
library(readr)
library(tidyr)
# set your working directory to the folder where all the files are stored.
# this function will create an object with all the file names in it.
files <- list.files()
# creates a list to hold all the objects in
list_of_files <- list()
for(i in 1:length(files)){
name <- files[i]
list_of_files[[name]] <- read_log(files[i], skip=1, col_names=FALSE)
}
files<-files[1:4]
# creates a list to hold all the objects in
list_of_files <- list()
for(i in 1:length(files)){
name <- files[i]
list_of_files[[name]] <- read_log(files[i], skip=1, col_names=FALSE)
}
list_of_files
list_of_files[[1]]
files
i <- 4
read_log(files[i], skip=1, col_names=FALSE)
# creates a list to hold all the objects in
list_of_files <- list()
for(i in 1:length(files)){
name <- files[i]
list_of_files[[name]] <- read_log(files[i], skip=0, col_names=FALSE)
}
list_of_files[[1]]
list_of_files[[1]]$X4[1]
date <- list_of_files[[1]]$X4[1]
date_2 <- as.POSIXct(date, format="%Y.%m.%d")
date_2
length(list_of_files)
name <- files[i]
name
list_of_files[[name]]
list_of_files[[name]]$X5[1]
date <- list_of_files[[1]]$X4[1]
date_2 <- as.POSIXct(date, format="%Y.%m.%d")
list_of_times <- list
for(i in 1:length(list_of_files)){
name <- files[i]
list_of_times[[name]] <- list_of_files[[name]]$X5[1]
}
date <- list_of_files[[1]]$X4[1]
date_2 <- as.POSIXct(date, format="%Y.%m.%d")
list_of_times <- list()
for(i in 1:length(list_of_files)){
name <- files[i]
list_of_times[[name]] <- list_of_files[[name]]$X5[1]
}
egg <- list_of_files[[i]]
for(i in 1:length(list_of_files)){
egg <- list_of_files[[i]]
egg1 <- separate(egg, X1,into = c("HR", "Move"))
egg_1_HR <- as.numeric(egg1$HR)
egg_1_Move <- as.numeric(egg1$Move)
final_1 <- data.frame(egg_1_HR,egg_1_Move)
Egg_1 <- na.omit(final_1)
list_of_df[[i]] <- Egg_1
}
list_of_df <- list()
for(i in 1:length(list_of_files)){
egg <- list_of_files[[i]]
egg1 <- separate(egg, X1,into = c("HR", "Move"))
egg_1_HR <- as.numeric(egg1$HR)
egg_1_Move <- as.numeric(egg1$Move)
final_1 <- data.frame(egg_1_HR,egg_1_Move)
Egg_1 <- na.omit(final_1)
list_of_df[[i]] <- Egg_1
}
ee <- list_of_df[[1]]
ee$egg_1_HR
ee$egg_1_Move
ee
dat <- do.call(list_of_df, cbind)
dat <- do.call(cbind, list_of_df)
library(tidyverse)
library(lubridate)
# https://stats.stackexchange.com/questions/388110/how-to-conduct-power-analysis-for-unbalanced-one-way-anova-in-r
# Number of simulations
n_sim <- 10000
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
setwd("C:/Users/afournier/Dropbox/Bridled_tern")
# https://stats.stackexchange.com/questions/388110/how-to-conduct-power-analysis-for-unbalanced-one-way-anova-in-r
# Number of simulations
n_sim <- 10000
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
eggs
laying_date <- eggs %>%
filter(!is.na(lay_month)) %>%
mutate(lay_date = mdy(paste0(lay_month,"-",lay_day,"-",lay_year)),
lay_yday = yday(lay_date))
table(laying_date$age_category)
sampsi_lay = c(29,76,9)
lay_date_sum <- laying_date %>%
group_by(age_category) %>%
summarize(mean_lay_yday = mean(lay_yday, na.rm=TRUE),
sd_lay_yday = sd(lay_yday, na.rm=TRUE))
# Mean of each group
lay_date_means <- lay_date_sum$mean_lay_yday
# Standard deviation of each group (assumed to be equal!)
lay_date_sd <- c(sd(laying_date$lay_yday,na.rm=TRUE),sd(laying_date$lay_yday,na.rm=TRUE),sd(laying_date$lay_yday,na.rm=TRUE))
p_vals_lay <- NULL
# Set seed for reproducibility
set.seed(2020)
## egg ratio
for(i in 1:n_sim) {
dat_tmp <- data.frame(
y = rnorm(sum(sampsi), mean = rep(lay_date_means, times = sampsi), sd = rep(lay_date_sd, times = sampsi))
, group = factor(rep(seq_along(lay_date_means), times = sampsi))
)
mod <- anova(lm(y~group, data = dat_tmp))
p_vals_lay[i] <-  mod$`Pr(>F)`[1]
rm(dat_tmp)
}
## egg ratio
for(i in 1:n_sim) {
dat_tmp <- data.frame(
y = rnorm(sum(sampsi_lay), mean = rep(lay_date_means, times = sampsi_lay), sd = rep(lay_date_sd, times = sampsi_lay))
, group = factor(rep(seq_along(lay_date_means), times = sampsi_lay))
)
mod <- anova(lm(y~group, data = dat_tmp))
p_vals_lay[i] <-  mod$`Pr(>F)`[1]
rm(dat_tmp)
}
lm(y~group, data = laying_date)
lm(lay_yday~group, data = laying_date)
lm(lay_yday~age_category, data = laying_date)
mod <- lm(lay_yday~age_category, data = laying_date)
summary(mod)
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
eggs$egg_size <- eggs$egg_width/eggs$egg_length
table(eggs$age_category)
sampsi <- c(30,78,9)
mod <- lm(egg_size~age_category, data = eggs)
lay_date_mod <- lm(lay_yday~age_category, data = laying_date)
summary(lay_date_mod)
egg_size_mod <- lm(egg_size~age_category, data = eggs)
summary(egg_size_mod)
incubation <- read.csv("raw_data/manova_inputs.csv", stringsAsFactors = FALSE)
incubation$age_category <- ifelse(incubation$Average.parents..ages<6,1,
ifelse(incubation$Average.parents..ages>=6&incubation$Average.parents..ages<12,2,3))
incubation$age_category <- as.factor(incubation$age_category)
incu_length_mod <- lm(Incubation.time..days.~age_category, data = incubation)
summary(incu_length_mod)
chick <- read.csv("cleaned_data/chick.csv", stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(1)
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(1) %>%
mutate(age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
hatch_w <- inner_join(chick, eggs, by="new_nest")
hatch_w_mod <- lm(weight~age_category, data = hatch_w)
summary(hatch_w_mod)
chick <- read.csv("cleaned_data/chick.csv", stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(n())
chick$chick_size <- chick$wingspan/chick$weight
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(1) %>%
mutate(age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
fledge_w <- inner_join(chick, eggs, by="new_nest")
fledge_w_mod <- lm(weight~age_category, data = fledge_w)
summary(fledge_w_mod)
dat_tmp <- data.frame(
y = rnorm(sum(sampsi_lay), mean = rep(lay_date_means, times = sampsi_lay), sd = rep(lay_date_sd, times = sampsi_lay))
, group = factor(rep(seq_along(lay_date_means), times = sampsi_lay))
)
mod <- anova(lm(y~group, data = dat_tmp))
od$`Pr(>F)`[1]
mod$`Pr(>F)`
mod
Citation()
citation()
R.version
lay_date_sum
factor(rep(seq_along(lay_date_means), times = sampsi_lay)
)
dat_tmp <- data.frame(
y = rnorm(sum(sampsi_lay), mean = rep(lay_date_means, times = sampsi_lay), sd = rep(lay_date_sd, times = sampsi_lay))
, group = factor(rep(seq_along(lay_date_means), times = sampsi_lay))
)
dat_tmp
mod <- anova(lm(y~group, data = dat_tmp))
summary(mod)
mod
anova(lay_date_mod)
lay_date_mod <- lm(lay_yday~age_category, data = laying_date)
anova(lay_date_mod)
anova(egg_size_mod)
anova(incu_length_mod)
anova(hatch_w_mod)
library(tidyverse)
library(lubridate)
# https://stats.stackexchange.com/questions/388110/how-to-conduct-power-analysis-for-unbalanced-one-way-anova-in-r
# Number of simulations
n_sim <- 10000
#######################
## Laying Date
######################
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
laying_date <- eggs %>%
filter(!is.na(lay_month)) %>%
mutate(lay_date = mdy(paste0(lay_month,"-",lay_day,"-",lay_year)),
lay_yday = yday(lay_date))
table(laying_date$age_category)
sampsi_lay = c(29,76,9)
lay_date_sum <- laying_date %>%
group_by(age_category) %>%
summarize(mean_lay_yday = mean(lay_yday, na.rm=TRUE),
sd_lay_yday = sd(lay_yday, na.rm=TRUE))
lay_date_mod <- lm(lay_yday~age_category, data = laying_date)
anova(lay_date_mod)
summary(lay_date_means)
summary(lay_date_mod)
egg_size_mod <- lm(egg_size~age_category, data = eggs)
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)))
eggs$egg_size <- eggs$egg_width/eggs$egg_length
table(eggs$age_category)
sampsi <- c(30,78,9)
egg_sum <- eggs %>%
group_by(age_category) %>%
summarize(mean_egg_size = mean(egg_size, na.rm=TRUE))
# Mean of each group
egg_means <- egg_sum$mean_egg_size
# Standard deviation of each group (assumed to be equal!)
egg_sd <- c(sd(eggs$egg_size,na.rm=TRUE),sd(eggs$egg_size,na.rm=TRUE),sd(eggs$egg_size,na.rm=TRUE))
p_vals_egg <- NULL
# Set seed for reproducibility
set.seed(2020)
## egg ratio
for(i in 1:n_sim) {
dat_tmp <- data.frame(
y = rnorm(sum(sampsi), mean = rep(egg_means, times = sampsi), sd = rep(egg_sd, times = sampsi))
, group = factor(rep(seq_along(egg_means), times = sampsi))
)
mod <- anova(lm(y~group, data = dat_tmp))
p_vals_egg[i] <-  mod$`Pr(>F)`[1]
rm(dat_tmp)
}
cat("Egg Size Simulated power is:", (sum(p_vals_egg <= 0.05)/n_sim)*100, "%")
anova(egg_size_mod)
egg_size_mod <- lm(egg_size~age_category, data = eggs)
summary(egg_size_mod)
str(eggs$age_category)
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)),
age_category= factor(age_category))
eggs$egg_size <- eggs$egg_width/eggs$egg_length
egg_size_mod <- lm(egg_size~age_category, data = eggs)
anova(egg_size_mod)
summary(egg_size_mod)
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
mutate(egg_width = ifelse(egg_width=="-",NA,egg_width),
egg_width = ifelse(egg_width=="",NA,egg_width),
egg_width = as.numeric(egg_width),
egg_length = ifelse(egg_length=="",NA,egg_length),
egg_length = ifelse(egg_length=="-",NA,egg_length),
egg_length = as.numeric(egg_length),
age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)),
age_category = factor(age_category))
laying_date <- eggs %>%
filter(!is.na(lay_month)) %>%
mutate(lay_date = mdy(paste0(lay_month,"-",lay_day,"-",lay_year)),
lay_yday = yday(lay_date))
lay_date_mod <- lm(lay_yday~age_category, data = laying_date)
anova(lay_date_mod)
summary(lay_date_mod)
summary(egg_size_mod)
anove(egg_size_mod)
anova(egg_size_mod)
incubation <- read.csv("raw_data/manova_inputs.csv", stringsAsFactors = FALSE)
incubation$age_category <- ifelse(incubation$Average.parents..ages<6,1,
ifelse(incubation$Average.parents..ages>=6&incubation$Average.parents..ages<12,2,3))
incubation$age_category <- as.factor(incubation$age_category)
incu_length_mod <- lm(Incubation.time..days.~age_category, data = incubation)
anova(incu_length_mod)
chick <- read.csv("cleaned_data/chick.csv", stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(1)
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(1) %>%
mutate(age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)),
age_category = factor(age_category))
hatch_w <- inner_join(chick, eggs, by="new_nest")
hatch_w_mod <- lm(weight~age_category, data = hatch_w)
anova(hatch_w_mod)
chick <- read.csv("cleaned_data/chick.csv", stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(n())
chick$chick_size <- chick$wingspan/chick$weight
eggs <- read.csv('cleaned_data/eggs.csv', stringsAsFactors = FALSE) %>%
group_by(new_nest) %>%
slice(1) %>%
mutate(age_category = ifelse(avg_age<6,1,
ifelse(avg_age>=6&avg_age<12,2,3)),
age_category = factor(age_category))
fledge_w <- inner_join(chick, eggs, by="new_nest")
table(fledge_w$age_category)
fledge_w$chick_size
fledge_w_mod <- lm(chick_size~age_category, data = fledge_w)
anova(fledge_w_mod)
76+29+9
?read.ebd
install.packages("auk")
library(auk)
?read_ebd
